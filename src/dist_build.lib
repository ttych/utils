#!/bin/sh
# -*- mode: sh -*-


#%require% std.lib


##################################################
# build
##################################################
TOOLSH_LOCAL_DIR="$HOME/local"
TOOLSH_LOCAL_OS_DIR="$TOOLSH_LOCAL_DIR/${OS}"
TOOLSH_LOCAL_OS_ARCH_DIR="$TOOLSH_LOCAL_OS_DIR/${OS_ARCH}"
export TOOLSH_LOCAL_DIR TOOLSH_LOCAL_OS_DIR TOOLSH_LOCAL_OS_ARCH_DIR

if [ -n "$HOME_ALT" ]; then
    TOOLSH_LOCAL_ALT_DIR="$HOME_ALT/local"
    TOOLSH_LOCAL_ALT_OS_DIR="$TOOLSH_LOCAL_ALT_DIR/${OS}"
    TOOLSH_LOCAL_ALT_OS_ARCH_DIR="$TOOLSH_LOCAL_ALT_OS_DIR/${OS_ARCH}"

    export TOOLSH_LOCAL_ALT_DIR TOOLSH_LOCAL_ALT_OS_DIR TOOLSH_LOCAL_ALT_OS_ARCH_DIR
fi

##################################################

dist_build_prefix()
{
    case "$1" in
        'alt')
            dist_build_prefix="$TOOLSH_LOCAL_ALT_OS_ARCH_DIR"
            ;;
        'try_alt')
            dist_build_prefix="$TOOLSH_LOCAL_ALT_OS_ARCH_DIR"
            dist_build_prefix="${dist_build_prefix:-$TOOLSH_LOCAL_OS_ARCH_DIR}"
            ;;
        'loc='*)
            dist_build_prefix="${1#loc=}"
            ;;
        'try_loc='*)
            dist_build_prefix="${1#try_loc=}"
            dist_build_prefix="${dist_build_prefix:-$TOOLSH_LOCAL_OS_ARCH_DIR}"
            ;;
        *)
            dist_build_prefix="$TOOLSH_LOCAL_OS_ARCH_DIR"
            ;;
    esac

    if [ -z "$dist_build_prefix" ]; then
        echo >&2 "no tools alt local arch dir"
        return 1
    fi
}

dist_build_configure()
{
    dist_build_prefix "$1" || return 1
    dist_build_configure="$dist_build_prefix/${PWD##*/}"
    mkdir -p "$dist_build_configure" && \
        ./configure --prefix "$dist_build_configure" $2 && \
        make && \
        make install
}

dist_build_cmake()
{
    dist_build_prefix "$1" || return 1
    dist_build_cmake="$dist_build_prefix/${PWD##*/}"
    mkdir -p "$dist_build_cmake" &&
        #make CMAKE_EXTRAS="-DCMAKE_INSTALL_PREFIX=$dist_build_cmake $2" &&
        cmake -DCMAKE_INSTALL_PREFIX=$dist_build_cmake $2 &&
        make install
}

dist_build_copy()
{
    dist_build_prefix "$1" || return 1
    if [ -n "$3" ]; then
        dist_build_copy__target="$dist_build_prefix/${3}"
    else
        dist_build_copy__target="$dist_build_prefix/${PWD##*/}"
    fi
    mkdir -p "$dist_build_copy__target" && \
        cp -Rf '.' "$dist_build_copy__target"
}

dist_build()
(
    dist_build__ret=0

    dist_identify_location "$1" && shift
    dist_build__loc="$dist_identify_location"

    [ -z "$1" ] && return 1
    _mktemp_dir && dist_build__dir="$_mktemp_dir" || return 1
    download "$1" "$_mktemp_dir" "$3" || return 1
    cd "$_mktemp_dir" || return 1
    extract "$download__file" || return 1
    if [ -d "$extract__file" ]; then
        cd "$extract__file" || return 1
    else
        dist_build__guess_count=$(ls -1 | wc -l)
        dist_build__guess="`ls -1`"
        if [ $dist_build__guess_count -eq 1 ] && [ -d "$dist_build__guess" ]; then
            cd "$dist_build__guess"
        else
            dist_build__rename="$extract__file"
        fi
    fi
    if [ -x configure ]; then
        dist_build_configure "$dist_build__loc" "$2"
        dist_build__ret=$?
    elif [ -r CMakeLists.txt ]; then
        dist_build_cmake "$dist_build__loc" "$2"
        dist_build__ret=$?
    elif [ -x Makefile ]; then
        echo >&2 "Makefile based build not supported"
        :
    else
        dist_build_copy "$dist_build__loc" "$2" "$dist_build__rename"
    fi
    rm -Rf "$_mktemp_dir"

    return $dist_build__ret
)

dist_build_interpolate()
{
    dist_build_interpolate=$(printf "$1" "$@")
}

dist_identify_location()
{
    dist_identify_location=
    case "$1" in
        'alt'|'try_alt'|'loc='*|'try_loc='*)
            dist_identify_location="$1"
            ;;
        *) return 1 ;;
    esac
}
